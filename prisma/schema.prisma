// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String? // For NextAuth compatibility
  company       String?
  phone         String?
  phoneVerified DateTime?
  image         String?
  emailVerified DateTime?
  password      String? // For credentials provider
  role          String    @default("user") // user, admin
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  blogPosts          BlogPost[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

// Admin manageable tables
model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String
  bio         String?
  image       String?
  linkedIn    String?
  twitter     String?
  email       String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Job {
  id          String   @id @default(cuid())
  title       String
  department  String
  location    String
  type        String   // full-time, part-time, contract
  description String
  requirements String
  salary      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applications JobApplication[]
}

model JobApplication {
  id            String   @id @default(cuid())
  jobId         String
  job           Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  // Applicant Information
  firstName     String
  lastName      String
  email         String
  phone         String?
  linkedinUrl   String?
  portfolioUrl  String?

  // Application Content
  coverLetter   String?
  resumeUrl     String   // URL to uploaded resume file (PDF/DOC)

  // Application Status
  status        String   @default("pending") // pending, reviewing, shortlisted, rejected, hired

  // Admin Notes
  adminNotes    String?
  reviewedBy    String?  // Admin user ID who reviewed
  reviewedAt    DateTime?

  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([jobId])
  @@index([status])
  @@index([email])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  image       String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
